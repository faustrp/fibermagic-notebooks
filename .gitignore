
# These are the names of a few directories that one rarely would want to include in their repository.
# Obviously, uncomment the appropriate line if you actually want a folder by one of the names listed

*__pycache__/*
downloads/*
Downloads/*
private/*
Private/*
secret/*
Secret/*
secrets/*
Secrets/*
DATA/*
Data/*
data/*
build/
develop-eggs/
dist/

# The `.*` below ignores all dotfiles, while below that `!.gitignore` makes an exception. 
# If you want to keep dotfiles by default, comment out `.*` and then only the specifically listed files will be used
.*
!.gitignore

# The git system simply ignores empty directories.
# If I want to have an empty directory that gets included in the repository, I create an blank file in the folder called `.placeholder`
# Thus I also make an exception for files with that name.
!.placeholder

 # As dotfiles, these are superfluous as long as all files starting with `.` are excluded with `.*`
.cache/
.idea/
*.kate-swp
*.sock

# Common files that are usually best to ignore.
*~
*.log
.DS_Store
*.pyc
*.py[cod]
*$py.class
*.egg-info
.Python


# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# temporary files which can be created if a process still has a handle open of a deleted file
.fuse_hidden*

# KDE directory preferences
.directory

# Linux trash folder which might appear on any partition or disk
.Trash-*

# .nfs files are created when an open file is removed but is still being accessed
.nfs*

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py
*.bundle.*
lib/
node_modules/
*.egg-info/
.ipynb_checkpoints
*.tsbuildinfo

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Cython debug symbols
cython_debug/

## Conda
ve/
MANIFEST
.coverage
coverage.xml
tmpfile.rc
tempfile.rc
conda-build/
conda_build_test_recipe/
record.txt
dev-init.bat
devenv/
Miniconda*.sh
miniconda*.sh
miniconda*.exe
.pytest_cache/
**/.vscode
conda.tmp/
*.iml
*.ipr
*.iws

# default pytest duration files
.test_durations
